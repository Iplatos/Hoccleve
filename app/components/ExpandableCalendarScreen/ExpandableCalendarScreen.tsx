import React, {useCallback, useMemo, useState} from 'react';
import {ActivityIndicator, StyleSheet, Text, View} from 'react-native';
import {useAppDispatch, useAppSelector} from "../../redux/hooks.ts";
import {fetchCalendar, TimetableEvent} from "../../redux/slises/calendarSlice.ts";
import {Colors} from "../../constants/Colors.ts";
import AgendaItem from "./mocks/AgendaItem.tsx";
import {MarkedDates} from "react-native-calendars/src/types";
import moment from "moment";
import {day, month, year} from "../../settings/Settings.ts";
import {ExpandableCalendar} from "react-native-calendars/src";
import {AgendaList, CalendarProvider, LocaleConfig, WeekCalendar} from "react-native-calendars";
import {hasRole} from "../../settings/helpers.tsx";

LocaleConfig.locales['ru'] = {
    monthNames: [
        '–Ø–Ω–≤–∞—Ä—å',
        '–§–µ–≤—Ä–∞–ª—å',
        '–ú–∞—Ä—Ç',
        '–ê–ø—Ä–µ–ª—å',
        '–ú–∞–π',
        '–ò—é–Ω—å',
        '–ò—é–ª—å',
        '–ê–≤–≥—É—Å—Ç',
        '–°–µ–Ω—Ç—è–±—Ä—å',
        '–û–∫—Ç—è–±—Ä—å',
        '–ù–æ—è–±—Ä—å',
        '–î–µ–∫–∞–±—Ä—å',
    ],
    monthNamesShort: [
        '–Ø–Ω–≤',
        '–§–µ–≤',
        '–ú–∞—Ä',
        '–ê–ø—Ä',
        '–ú–∞–π',
        '–ò—é–Ω',
        '–ò—é–ª',
        '–ê–≤–≥',
        '–°–µ–Ω',
        '–û–∫—Ç',
        '–ù–æ—è',
        '–î–µ–∫',
    ],
    dayNames: [
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–≤—Ç–æ—Ä–Ω–∏–∫',
        '—Å—Ä–µ–¥–∞',
        '—á–µ—Ç–≤–µ—Ä–≥',
        '–ø—è—Ç–Ω–∏—Ü–∞',
        '—Å—É–±–±–æ—Ç–∞',
    ],
    dayNamesShort: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],
    today: '–°–µ–≥–æ–¥–Ω—è',
};
LocaleConfig.defaultLocale = 'ru';

const leftArrowIcon = require('../ExpandableCalendarScreen/img/previous.png');
const rightArrowIcon = require('../ExpandableCalendarScreen/img/next.png');


type AgendaItem = {
    title: string; // –î–∞—Ç–∞
    data: TimetableEvent[];
};

interface Props {
    weekView?: boolean;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ markedDates
const generateMarkedDates = (agendaItems: AgendaItem[]): MarkedDates => {
    const marked: MarkedDates = {};

    agendaItems.forEach(({title, data}) => {
        marked[title] = data.length > 0 ? {marked: true} : {disabled: true};
    });

    return marked;
};

// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
const useMarkedDates = (agendaItems: AgendaItem[]) => {
    return useMemo(() => {
        if (agendaItems.length > 0) {
            return generateMarkedDates(agendaItems);
        }
        return {};
    }, [agendaItems]);
};

const ExpandableCalendarScreen = (props: Props) => {
    const dispatch = useAppDispatch();
    const user = useAppSelector(state => state.user.user);
    const timetable = useAppSelector(state => state.calendar.data);
    const isLoading = useAppSelector(state => state.calendar.status === 'loading');
    const isSeminarian = user ? hasRole(user, "seminarian") : false;
    const [refreshing, setRefreshing] = useState(false);
    const [weekView, setWeekView] = useState(false);

    const agendaItems = useMemo(() => transformToAgendaItems(timetable), [timetable]);
    const markedDates = useMarkedDates(agendaItems);
    const initialDateCalendar = `${year}-${month}-${day}`;

    const [selectedDate, setSelectedDate] = useState<string>(initialDateCalendar);

    // üîπ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –º–µ—Å—è—Ü
    const loadMonth = useCallback((dateString: string) => {
        const start = moment(dateString).startOf("month").format("YYYY-MM-DD");
        const end = moment(dateString).endOf("month").format("YYYY-MM-DD");

        dispatch(fetchCalendar({
            start,
            end,
            type: "my",
            filters: {
                seminarians: isSeminarian ? [user?.id] : [],
                childrens: [],
                groupsAndClasses: [],
                direction: null,
                seminariansInCourses: [],
            }
        }));
    }, [dispatch, user]);

    // üîπ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞)
    // useEffect(() => {
    //     loadMonth(initialDateCalendar);
    // }, [loadMonth]);

    // üîπ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ—Ä–µ—à–∞
    const onRefresh = useCallback(() => {
        setRefreshing(true);
          loadMonth(selectedDate);
        setRefreshing(false);
    }, [
          loadMonth,
        selectedDate]);

    // üîπ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
    const filteredAgendaItems = useMemo(() => {
        if (!agendaItems || agendaItems.length === 0) return [];
        const filtered = agendaItems.filter(item => item.title === selectedDate);
        return filtered.length > 0 ? filtered : [{title: selectedDate, data: []}];
    }, [agendaItems, selectedDate]);

    const renderItem = useCallback(({item}: any) => {
        return <AgendaItem item={item} isSeminarian={isSeminarian}/>;
    }, []);

    console.log(agendaItems)
    return (
        <CalendarProvider
            date={initialDateCalendar}
            showTodayButton
            todayButtonStyle={{alignSelf: 'flex-start', marginRight: 5, right: 0}}
            onDateChanged={(date) => setSelectedDate(date)}
        >
            {weekView ? (
                <WeekCalendar
                    firstDay={1}
                    markedDates={{
                        ...markedDates,
                        [selectedDate]: {selected: true, selectedColor: Colors.colorAccent},
                    }}
                    onDayPress={(day) => setSelectedDate(day.dateString)}
                />
            ) : (
                <ExpandableCalendar
                    firstDay={1}
                    markedDates={{
                        ...markedDates,
                        [selectedDate]: {selected: true, selectedColor: Colors.colorAccent},
                    }}
                    onDayPress={(day) => setSelectedDate(day.dateString)}
                      onMonthChange={(month) => loadMonth(month.dateString)} // üîπ –ø–æ–¥–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Å—è—Ü–∞
                    leftArrowImageSource={leftArrowIcon}
                    rightArrowImageSource={rightArrowIcon}
                    closeOnDayPress={false}
                />
            )}
            {isLoading ? (
                <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>
                    <ActivityIndicator/>
                </View>
            ) : (
                <AgendaList
                    refreshing={refreshing}
                    onRefresh={onRefresh}
                    sections={filteredAgendaItems}
                    renderItem={renderItem}
                    sectionStyle={styles.section}
                    keyExtractor={(item, index) => `${item?.id || 'no-id'}-${index}`}
                    ListEmptyComponent={
                        <Text style={{paddingLeft: 15, marginTop: 15, fontSize: 18}}>
                            –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π
                        </Text>
                    }
                />
            )}
        </CalendarProvider>
    );
};

export function transformToAgendaItems(data: any[]): AgendaItem[] {
    if (!Array.isArray(data)) return [];

    const groupedByDate: Record<string, any[]> = data.reduce((acc, item) => {
        const date = item.date_conference;
        if (!date) return acc;
        if (!acc[date]) acc[date] = [];
        acc[date].push(item);
        return acc;
    }, {});

    return Object.entries(groupedByDate)
        .map(([date, items]) => ({
            title: date,
            data: items.sort((a, b) => moment(a.start_time, "HH:mm").diff(moment(b.start_time, "HH:mm"))),
        }))
        .sort((a, b) => moment(a.title).diff(moment(b.title)));
}


// export function transformToAgendaItems(data: any[]): AgendaItem[] {
//     if (!Array.isArray(data)) {
//         throw new Error("Input data must be an array");
//     }
//
//     const MAX_MONTHS_AHEAD = 2; // –ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è
//     const today = moment();
//
//     // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π
//     const generateFutureLessons = (item: any): any[] => {
//         if (item.interval_type !== "regular") {
//             return [];
//         }
//
//         const futureLessons: any[] = [];
//         const repeatDay = item.repeat_day; // 1 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) ‚Äì 7 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
//         const today = moment();
//         const maxDate = item.end_date
//             ? moment(item.end_date, "YYYY-MM-DD")
//             : today.clone().add(MAX_MONTHS_AHEAD, "months");
//
//         const startDate = moment(item.start_date || item.date_conference, "YYYY-MM-DD");
//         let nextDate = startDate.clone();
//
//         // –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É —Å –Ω—É–∂–Ω—ã–º –¥–Ω—ë–º –Ω–µ–¥–µ–ª–∏ >= startDate
//         while (nextDate.isoWeekday() !== repeatDay || nextDate.isBefore(startDate, "day")) {
//             nextDate.add(1, "day");
//         }
//
//         while (nextDate.isSameOrBefore(maxDate, "day")) {
//             futureLessons.push({
//                 ...item,
//                 date_conference: nextDate.format("YYYY-MM-DD"),
//             });
//             nextDate = nextDate.add(1, "week");
//         }
//
//         return futureLessons;
//     };
//
//     // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –±—É–¥—É—â–∏–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
//     const extendedData = data.flatMap((item) => {
//         const futureLessons = generateFutureLessons(item); // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
//         return [item, ...futureLessons]; // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
//     });
//
//     // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
//     const groupedByDate: Record<string, any[]> = extendedData.reduce((acc, item) => {
//         const date = item.date_conference; // –ò—Å–ø–æ–ª—å–∑—É–µ–º date_conference –∫–∞–∫ –∫–ª—é—á
//         if (!date) {
//             console.warn("Item without date_conference:", item);
//             return acc;
//         }
//         if (!acc[date]) {
//             acc[date] = [];
//         }
//         acc[date].push(item);
//         return acc;
//     }, {});
//
//     // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç AgendaItem
//     return Object.entries(groupedByDate)
//         .map(([date, items]) => ({
//             title: date, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –¥–∞—Ç–∞
//             data: items.sort((a, b) => {
//                 const timeA = moment(a.start_time, "HH:mm:ss"); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ start_time
//                 const timeB = moment(b.start_time, "HH:mm:ss");
//                 return timeA.isBefore(timeB) ? -1 : 1;
//             }),
//         }))
//         .sort((a, b) => {
//             // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
//             return moment(a.title, "YYYY-MM-DD").isBefore(moment(b.title, "YYYY-MM-DD")) ? -1 : 1;
//         });
// }

export default ExpandableCalendarScreen;

const styles = StyleSheet.create({
    calendar: {
        paddingLeft: 20,
        paddingRight: 20
    },
    header: {
        backgroundColor: 'lightgrey'
    },
    section: {
        backgroundColor: '#f0f4f7',
        color: 'grey',
        textTransform: 'capitalize',
    }
});

